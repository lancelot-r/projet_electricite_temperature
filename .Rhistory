plot(fitted_values, arima_model_2_sqrt$residuals, main="Résidus vs Valeurs Ajustées",
xlab="Valeurs Ajustées", ylab="Résidus")
abline(h=0, col="red")
Box.test(arima_model_res$residuals, type="Ljung")
auto_arima_temp <- auto.arima(ts_temp, ic = "bic")
arima_model_1 = arima(ts_temp, order = c(1, 0, 2), seasonal = list(order = c(0, 0, 2), period = 24)) # = auto.arima()
predict_temp <- forecast(arima_model_1, h = 192)
test_predict_temp <- forecast(auto_arima_temp, h = 192)
predict_temp_season <- forecast(arima_model_2, h = 192)
par(mfrow = c(1, 4))
xlim_start <- as.POSIXct("2017-09-01 00:00:00")
xlim_end <- as.POSIXct("2017-09-03 23:00:00")
plot(test_predict_temp, xlim = c(63, 66), ylim = c(10, 40), main = "SARIMA(2,0,0)(2,1,0)[24]")
plot(data$Datetime, data$Temperature, col = "red", type = "l",
xlim = c(xlim_start, xlim_end),
xlab = "Temps", ylab = "Consommation électrique",
main = "Temperature", ylim = c(10, 40))
plot(predict_temp, xlim = c(63, 66), ylim = c(10, 40), main = "ARIMA(1,0,2)(0,0,2)[24]")
plot(predict_temp_season, xlim = c(63, 66), ylim = c(10, 40), main = "ARIMA(1,0,2)(1,1,1)[24]")
# Creation de la série temporelle pour la température
ts_watt = ts(data_ete$conso, frequency = 24, start = c(1,1))
decompose_watt = decompose(ts_watt)
plot(decompose_watt)
ts_watt_trend = decompose_watt$trend
t<-1:1488
t1<-ts(t,start=c(1,1),freq=24)
t2<-ts(t^2,start=c(1,1),freq=24)
t3<-ts(t^3,start=c(1,1),freq=24)
t4<-ts(t^4,start=c(1,1),freq=24)
t5<-ts(t^5,start=c(1,1),freq=24)
lm2 = lm(ts_watt_trend~t1+t2)
plot(ts_watt_trend, ylim = c(0, 500000))
lines(predict(lm2), col = "blue")
par(mfrow=c(1,2))
acf(ts_watt, main="ts_watt - est.trend", lag.max = 192)
pacf(ts_watt)
adf.test(ts_watt)
arima_watt_res_1 = arima(ts_watt, order = c(2, 0, 0), seasonal = list(order = c(1, 1, 1), period = 24)) # = auto.arima()
par(mfrow=c(1,2))
acf(arima_watt_res_1$residuals, main="serie1 csv - est. tend.", ylim = c(-1, 1), lag.max = 192)
pacf(arima_watt_res_1$residuals, ylim = c(-1, 1), lag.max = 192)
Box.test(arima_watt_res_1$residuals, type="Ljung")
par(mfrow = c(1,3))
fitted_values <- fitted(arima_watt_res_2)
par(mfrow = c(1,3))
fitted_values <- fitted(arima_watt_res_1)
plot(fitted_values, arima_watt_res_2$residuals, main="Résidus vs Valeurs Ajustées",
xlab="Valeurs Ajustées", ylab="Résidus")
par(mfrow = c(1,3))
fitted_values <- fitted(arima_watt_res_1)
plot(fitted_values, arima_watt_res_1$residuals, main="Résidus vs Valeurs Ajustées",
xlab="Valeurs Ajustées", ylab="Résidus")
abline(h=0, col="red")
hist(arima_watt_res_1$residuals, breaks = 30, main = "Histogramme des résidus", probability = TRUE)
lines(density(arima_watt_res_1$residuals), col = "blue")
lines(density(rnorm(1000000)), col = "red")
qqnorm(arima_watt_res_1$residuals, plot.it = T)
qqline(arima_watt_res_1$residuals, col = "red")
par(mfrow = c(1,3))
fitted_values <- fitted(arima_watt_res_1)
plot(fitted_values, arima_watt_res_1$residuals, main="Résidus vs Valeurs Ajustées",
xlab="Valeurs Ajustées", ylab="Résidus")
abline(h=0, col="red")
hist(arima_watt_res_1$residuals, breaks = 30, main = "Histogramme des résidus", probability = TRUE)
lines(density(arima_watt_res_1$residuals), col = "blue")
lines(density(rnorm(1000000)), col = "red")
qqPlot(arima_watt_res_1$residuals)
par(mfrow = c(1,3))
fitted_values <- fitted(arima_watt_res_1)
plot(fitted_values, arima_watt_res_1$residuals, main="Résidus vs Valeurs Ajustées",
xlab="Valeurs Ajustées", ylab="Résidus")
abline(h=0, col="red")
hist(arima_watt_res_1$residuals, main = "Histogramme des résidus", probability = TRUE)
lines(density(arima_watt_res_1$residuals), col = "blue")
lines(density(rnorm(1000000)), col = "red")
qqPlot(arima_watt_res_1$residuals)
library("car")
arima_model_2 = arima(ts_temp, order = c(1, 0, 2), seasonal = list(order = c(1, 1, 1), period = 24)) # = auto.arima()
arima_model_2_log = arima(log(ts_temp), order = c(1, 0, 2), seasonal = list(order = c(1, 1, 1), period = 24)) # = auto.arima()
arima_model_2_sqrt = arima(BoxCox(ts_temp, lambda = "auto"), order = c(1, 0, 2), seasonal = list(order = c(1, 1, 1), period = 24)) # = auto.arima()
par(mfrow = c(1, 3))
qqPlot(arima_model_2$residuals)
qqPlot(arima_model_2_log$residuals)
qqPlot(arima_model_2_sqrt$residuals)
par(mfrow = c(1,2))
fitted_values_2 <- fitted(arima_model_2)
plot(fitted_values_2, arima_model_2$residuals, main="Résidus vs Valeurs Ajustées",
xlab="Valeurs Ajustées", ylab="Résidus")
abline(h=0, col="red")
fitted_values <- fitted(arima_model_2_sqrt)
plot(fitted_values, arima_model_2_sqrt$residuals, main="Résidus vs Valeurs Ajustées",
xlab="Valeurs Ajustées", ylab="Résidus")
abline(h=0, col="red")
Box.test(arima_model_res$residuals, type="Ljung")
auto_arima_temp <- auto.arima(ts_temp, ic = "bic")
predict_temp <- forecast(arima_model_1, h = 192)
test_predict_temp <- forecast(auto_arima_temp, h = 192)
predict_temp_season <- forecast(arima_model_2, h = 192)
par(mfrow = c(1, 4))
xlim_start <- as.POSIXct("2017-09-01 00:00:00")
xlim_end <- as.POSIXct("2017-09-03 23:00:00")
plot(test_predict_temp, xlim = c(63, 66), ylim = c(10, 40), main = "SARIMA(2,0,0)(2,1,0)[24]")
plot(data$Datetime, data$Temperature, col = "red", type = "l",
xlim = c(xlim_start, xlim_end),
xlab = "Temps", ylab = "Consommation électrique",
main = "Temperature", ylim = c(10, 40))
plot(predict_temp, xlim = c(63, 66), ylim = c(10, 40), main = "ARIMA(1,0,2)(0,0,2)[24]")
plot(predict_temp_season, xlim = c(63, 66), ylim = c(10, 40), main = "ARIMA(1,0,2)(1,1,1)[24]")
predict_temp <- forecast(arima_model_1, h = 192)
test_predict_temp <- forecast(auto_arima_temp, h = 192)
predict_temp_season <- forecast(arima_model_2, h = 192)
par(mfrow = c(1, 4))
xlim_start <- as.POSIXct("2017-09-01 00:00:00")
xlim_end <- as.POSIXct("2017-09-03 23:00:00")
plot(test_predict_temp, xlim = c(63, 66), ylim = c(10, 40), main = "SARIMA(2,0,0)(2,1,0)[24]")
plot(data$Datetime, data$Temperature, col = "red", type = "l",
xlim = c(xlim_start, xlim_end),
xlab = "Temps", ylab = "Consommation électrique",
main = "Temperature", ylim = c(10, 40))
plot(predict_temp_season, xlim = c(63, 66), ylim = c(10, 40), main = "ARIMA(1,0,2)(0,0,2)[24]")
plot(predict_temp, xlim = c(63, 66), ylim = c(10, 40), main = "ARIMA(1,0,2)(1,1,1)[24]")
auto_arima_temp
arima_model_res = arima(res_ts_temp, order = c(1, 0, 2), seasonal = list(order = c(1, 0, 1), period = 24)) # = auto.arima()
par(mfrow=c(1,2))
acf(arima_model_res$residuals, main="serie1 csv - est. tend.", ylim = c(-1, 1))
pacf(arima_model_res$residuals, ylim = c(-1, 1))
predict_temp <- forecast(arima_model_1, h = 192)
test_predict_temp <- forecast(auto_arima_temp, h = 192)
predict_temp_season <- forecast(arima_model_2, h = 192)
par(mfrow = c(1, 4))
xlim_start <- as.POSIXct("2017-09-01 00:00:00")
xlim_end <- as.POSIXct("2017-09-03 23:00:00")
plot(test_predict_temp, xlim = c(63, 66), ylim = c(10, 40), main = "SARIMA(2,0,0)(2,1,0)[24]")
plot(data$Datetime, data$Temperature, col = "red", type = "l",
xlim = c(xlim_start, xlim_end),
xlab = "Temps", ylab = "Consommation électrique",
main = "Temperature", ylim = c(10, 40))
plot(predict_temp_season, xlim = c(63, 66), ylim = c(10, 40), main = "ARIMA(1,0,2)(0,0,2)[24]")
plot(predict_temp, xlim = c(63, 66), ylim = c(10, 40), main = "ARIMA(1,0,2)(1,1,1)[24]")
summary(arima_model_res)
shapiro.test(auto_arima_temp$residuals)
shapiro.test(arima_temp_1$residuals)
shapiro.test(arima_model_1$residuals)
shapiro.test(arima_model_2$residuals)
predict_temp <- forecast(arima_model_1, h = 192)
test_predict_temp <- forecast(auto_arima_temp, h = 192)
predict_temp_season <- forecast(arima_model_2, h = 192)
par(mfrow = c(1, 3))
xlim_start <- as.POSIXct("2017-09-01 00:00:00")
xlim_end <- as.POSIXct("2017-09-03 23:00:00")
plot(test_predict_temp, xlim = c(63, 66), ylim = c(10, 40), main = "SARIMA(2,0,0)(2,1,0)[24]")
plot(data$Datetime, data$Temperature, col = "red", type = "l",
xlim = c(xlim_start, xlim_end),
xlab = "Temps", ylab = "Consommation électrique",
main = "Temperature", ylim = c(10, 40))
plot(predict_temp_season, xlim = c(63, 66), ylim = c(10, 40), main = "ARIMA(1,0,2)(0,0,2)[24]")
hw_temp <- HoltWinters(ts_temp)
?HoltWinters
hw_temp <- HoltWinters(ts_temp, gamma = T, beta = T)
predict_temp <- forecast(arima_model_1, h = 192)
test_predict_temp <- forecast(auto_arima_temp, h = 192)
predict_temp_season <- forecast(arima_model_2, h = 192)
predict_hw_temp <- forecast(hw_temp, h = 192)
par(mfrow = c(1, 4))
xlim_start <- as.POSIXct("2017-09-01 00:00:00")
xlim_end <- as.POSIXct("2017-09-03 23:00:00")
plot(test_predict_temp, xlim = c(63, 66), ylim = c(10, 40), main = "SARIMA(2,0,0)(2,1,0)[24]")
plot(data$Datetime, data$Temperature, col = "red", type = "l",
xlim = c(xlim_start, xlim_end),
xlab = "Temps", ylab = "Consommation électrique",
main = "Temperature", ylim = c(10, 40))
plot(predict_temp_season, xlim = c(63, 66), ylim = c(10, 40), main = "ARIMA(1,0,2)(0,0,2)[24]")
plot(predict_hw_temp, xlim = c(63, 66), ylim = c(10, 40), main = "Holt Winters")
hw_temp <- HoltWinters(ts_temp)
predict_temp <- forecast(arima_model_1, h = 192)
test_predict_temp <- forecast(auto_arima_temp, h = 192)
predict_temp_season <- forecast(arima_model_2, h = 192)
predict_hw_temp <- forecast(hw_temp, h = 192)
par(mfrow = c(1, 4))
xlim_start <- as.POSIXct("2017-09-01 00:00:00")
xlim_end <- as.POSIXct("2017-09-03 23:00:00")
plot(test_predict_temp, xlim = c(63, 66), ylim = c(10, 40), main = "SARIMA(2,0,0)(2,1,0)[24]")
plot(data$Datetime, data$Temperature, col = "red", type = "l",
xlim = c(xlim_start, xlim_end),
xlab = "Temps", ylab = "Consommation électrique",
main = "Temperature", ylim = c(10, 40))
plot(predict_temp_season, xlim = c(63, 66), ylim = c(10, 40), main = "ARIMA(1,0,2)(0,0,2)[24]")
plot(predict_hw_temp, xlim = c(63, 66), ylim = c(10, 40), main = "Holt Winters")
hw_temp <- HoltWinters(ts_temp, gamma = F)
predict_temp <- forecast(arima_model_1, h = 192)
test_predict_temp <- forecast(auto_arima_temp, h = 192)
predict_temp_season <- forecast(arima_model_2, h = 192)
predict_hw_temp <- forecast(hw_temp, h = 192)
par(mfrow = c(1, 4))
xlim_start <- as.POSIXct("2017-09-01 00:00:00")
xlim_end <- as.POSIXct("2017-09-03 23:00:00")
plot(test_predict_temp, xlim = c(63, 66), ylim = c(10, 40), main = "SARIMA(2,0,0)(2,1,0)[24]")
plot(data$Datetime, data$Temperature, col = "red", type = "l",
xlim = c(xlim_start, xlim_end),
xlab = "Temps", ylab = "Consommation électrique",
main = "Temperature", ylim = c(10, 40))
plot(predict_temp_season, xlim = c(63, 66), ylim = c(10, 40), main = "ARIMA(1,0,2)(0,0,2)[24]")
plot(predict_hw_temp, xlim = c(63, 66), ylim = c(10, 40), main = "Holt Winters")
hw_temp <- HoltWinters(ts_temp, gamma = T)
predict_temp <- forecast(arima_model_1, h = 192)
test_predict_temp <- forecast(auto_arima_temp, h = 192)
predict_temp_season <- forecast(arima_model_2, h = 192)
predict_hw_temp <- forecast(hw_temp, h = 192)
par(mfrow = c(1, 4))
xlim_start <- as.POSIXct("2017-09-01 00:00:00")
xlim_end <- as.POSIXct("2017-09-03 23:00:00")
plot(test_predict_temp, xlim = c(63, 66), ylim = c(10, 40), main = "SARIMA(2,0,0)(2,1,0)[24]")
plot(data$Datetime, data$Temperature, col = "red", type = "l",
xlim = c(xlim_start, xlim_end),
xlab = "Temps", ylab = "Consommation électrique",
main = "Temperature", ylim = c(10, 40))
plot(predict_temp_season, xlim = c(63, 66), ylim = c(10, 40), main = "ARIMA(1,0,2)(0,0,2)[24]")
plot(predict_hw_temp, xlim = c(63, 66), ylim = c(10, 40), main = "Holt Winters")
hw_temp <- HoltWinters(ts_temp, gamma = T, alpha = F)
hw_temp <- HoltWinters(ts_temp, gamma = T, alpha = 3)
hw_temp <- HoltWinters(ts_temp, gamma = T, alpha = T)
predict_temp <- forecast(arima_model_1, h = 192)
test_predict_temp <- forecast(auto_arima_temp, h = 192)
predict_temp_season <- forecast(arima_model_2, h = 192)
predict_hw_temp <- forecast(hw_temp, h = 192)
par(mfrow = c(1, 4))
xlim_start <- as.POSIXct("2017-09-01 00:00:00")
xlim_end <- as.POSIXct("2017-09-03 23:00:00")
plot(test_predict_temp, xlim = c(63, 66), ylim = c(10, 40), main = "SARIMA(2,0,0)(2,1,0)[24]")
plot(data$Datetime, data$Temperature, col = "red", type = "l",
xlim = c(xlim_start, xlim_end),
xlab = "Temps", ylab = "Consommation électrique",
main = "Temperature", ylim = c(10, 40))
plot(predict_temp_season, xlim = c(63, 66), ylim = c(10, 40), main = "ARIMA(1,0,2)(0,0,2)[24]")
plot(predict_hw_temp, xlim = c(63, 66), ylim = c(10, 40), main = "Holt Winters")
hw_temp <- HoltWinters(ts_temp, gamma = T)
predict_temp <- forecast(arima_model_1, h = 192)
test_predict_temp <- forecast(auto_arima_temp, h = 192)
predict_temp_season <- forecast(arima_model_2, h = 192)
predict_hw_temp <- forecast(hw_temp, h = 192)
par(mfrow = c(1, 4))
xlim_start <- as.POSIXct("2017-09-01 00:00:00")
xlim_end <- as.POSIXct("2017-09-03 23:00:00")
plot(test_predict_temp, xlim = c(63, 66), ylim = c(10, 40), main = "SARIMA(2,0,0)(2,1,0)[24]")
plot(data$Datetime, data$Temperature, col = "red", type = "l",
xlim = c(xlim_start, xlim_end),
xlab = "Temps", ylab = "Consommation électrique",
main = "Temperature", ylim = c(10, 40))
plot(predict_temp_season, xlim = c(63, 66), ylim = c(10, 40), main = "ARIMA(1,0,2)(0,0,2)[24]")
plot(predict_hw_temp, xlim = c(63, 66), ylim = c(10, 40), main = "Holt Winters")
hw_temp <- HoltWinters(ts_temp, gamma = T, alpha = T, beta = T)
predict_temp <- forecast(arima_model_1, h = 192)
test_predict_temp <- forecast(auto_arima_temp, h = 192)
predict_temp_season <- forecast(arima_model_2, h = 192)
predict_hw_temp <- forecast(hw_temp, h = 192)
par(mfrow = c(1, 4))
xlim_start <- as.POSIXct("2017-09-01 00:00:00")
xlim_end <- as.POSIXct("2017-09-03 23:00:00")
plot(test_predict_temp, xlim = c(63, 66), ylim = c(10, 40), main = "SARIMA(2,0,0)(2,1,0)[24]")
plot(data$Datetime, data$Temperature, col = "red", type = "l",
xlim = c(xlim_start, xlim_end),
xlab = "Temps", ylab = "Consommation électrique",
main = "Temperature", ylim = c(10, 40))
plot(predict_temp_season, xlim = c(63, 66), ylim = c(10, 40), main = "ARIMA(1,0,2)(0,0,2)[24]")
plot(predict_hw_temp, xlim = c(63, 66), ylim = c(10, 40), main = "Holt Winters")
hw_temp <- HoltWinters(ts_temp, gamma = T, alpha = T, beta = F)
hw_temp <- HoltWinters(ts_temp, gamma = T, alpha = T)
predict_temp <- forecast(arima_model_1, h = 192)
test_predict_temp <- forecast(auto_arima_temp, h = 192)
predict_temp_season <- forecast(arima_model_2, h = 192)
predict_hw_temp <- forecast(hw_temp, h = 192)
par(mfrow = c(1, 4))
xlim_start <- as.POSIXct("2017-09-01 00:00:00")
xlim_end <- as.POSIXct("2017-09-03 23:00:00")
plot(test_predict_temp, xlim = c(63, 66), ylim = c(10, 40), main = "SARIMA(2,0,0)(2,1,0)[24]")
plot(data$Datetime, data$Temperature, col = "red", type = "l",
xlim = c(xlim_start, xlim_end),
xlab = "Temps", ylab = "Consommation électrique",
main = "Temperature", ylim = c(10, 40))
plot(predict_temp_season, xlim = c(63, 66), ylim = c(10, 40), main = "ARIMA(1,0,2)(0,0,2)[24]")
plot(predict_hw_temp, xlim = c(63, 66), ylim = c(10, 40), main = "Holt Winters")
hw_temp <- ets(ts_temp)
predict_temp <- forecast(arima_model_1, h = 192)
test_predict_temp <- forecast(auto_arima_temp, h = 192)
predict_temp_season <- forecast(arima_model_2, h = 192)
predict_hw_temp <- forecast(hw_temp, h = 192)
par(mfrow = c(1, 4))
xlim_start <- as.POSIXct("2017-09-01 00:00:00")
xlim_end <- as.POSIXct("2017-09-03 23:00:00")
plot(test_predict_temp, xlim = c(63, 66), ylim = c(10, 40), main = "SARIMA(2,0,0)(2,1,0)[24]")
plot(data$Datetime, data$Temperature, col = "red", type = "l",
xlim = c(xlim_start, xlim_end),
xlab = "Temps", ylab = "Consommation électrique",
main = "Temperature", ylim = c(10, 40))
plot(predict_temp_season, xlim = c(63, 66), ylim = c(10, 40), main = "ARIMA(1,0,2)(0,0,2)[24]")
plot(predict_hw_temp, xlim = c(63, 66), ylim = c(10, 40), main = "Holt Winters")
hw_temp <- HoltWinters(ts_temp, alpha = T, gamma = T)
ets_temp <- ets(ts_temp)
predict_temp <- forecast(arima_model_1, h = 192)
test_predict_temp <- forecast(auto_arima_temp, h = 192)
predict_temp_season <- forecast(arima_model_2, h = 192)
predict_hw_temp <- forecast(hw_temp, h = 192)
predict_ets_temp <- forecast(ets_temp, h = 192)
par(mfrow = c(1, 4))
xlim_start <- as.POSIXct("2017-09-01 00:00:00")
xlim_end <- as.POSIXct("2017-09-03 23:00:00")
plot(test_predict_temp, xlim = c(63, 66), ylim = c(10, 40), main = "SARIMA(2,0,0)(2,1,0)[24]")
plot(data$Datetime, data$Temperature, col = "red", type = "l",
xlim = c(xlim_start, xlim_end),
xlab = "Temps", ylab = "Consommation électrique",
main = "Temperature", ylim = c(10, 40))
plot(predict_temp_season, xlim = c(63, 66), ylim = c(10, 40), main = "ARIMA(1,0,2)(0,0,2)[24]")
plot(predict_ets_temp, xlim = c(63, 66), ylim = c(10, 40), main = "ets")
plot(predict_hw_temp, xlim = c(63, 66), ylim = c(10, 40), main = "Holt Winters")
predict_temp <- forecast(arima_model_1, h = 192)
test_predict_temp <- forecast(auto_arima_temp, h = 192)
predict_temp_season <- forecast(arima_model_2, h = 192)
predict_hw_temp <- forecast(hw_temp, h = 192)
predict_ets_temp <- forecast(ets_temp, h = 192)
par(mfrow = c(1, 5))
xlim_start <- as.POSIXct("2017-09-01 00:00:00")
xlim_end <- as.POSIXct("2017-09-03 23:00:00")
plot(test_predict_temp, xlim = c(63, 66), ylim = c(10, 40), main = "SARIMA(2,0,0)(2,1,0)[24]")
plot(data$Datetime, data$Temperature, col = "red", type = "l",
xlim = c(xlim_start, xlim_end),
xlab = "Temps", ylab = "Consommation électrique",
main = "Temperature", ylim = c(10, 40))
plot(predict_temp_season, xlim = c(63, 66), ylim = c(10, 40), main = "ARIMA(1,0,2)(0,0,2)[24]")
plot(predict_ets_temp, xlim = c(63, 66), ylim = c(10, 40), main = "ets")
plot(predict_hw_temp, xlim = c(63, 66), ylim = c(10, 40), main = "Holt Winters")
hw_temp <- hw(ts_temp, alpha = T, gamma = T)
hw_temp <- HoltWinters(ts_temp, alpha = T, gamma = T)
ets_temp <- ets(ts_temp)
550374*1.196^3
550374*1.0196^3
data <- read.csv("~/github/projet_electricite_temperature/data/powerconsumption.csv", header=T)
row.names(data)
data <- read.csv("~/github/projet_electricite_temperature/data/powerconsumption.csv", header=T)
col.names(data)
data <- read.csv("~/github/projet_electricite_temperature/data/powerconsumption.csv", header=T)
colnames(data)
data <- read.csv("~/github/projet_electricite_temperature/data/powerconsumption.csv", header=T)
colnames(data)
data <- read.csv("~/github/projet_electricite_temperature/data/powerconsumption.csv", header=T)
data$conso =
data$PowerConsumption_Zone1+
data$PowerConsumption_Zone2+
data$PowerConsumption_Zone3
data = data %>%
select(-PowerConsumption_Zone1, -PowerConsumption_Zone2, -PowerConsumption_Zone3, -Humidity, -WindSpeed, -GeneralDiffuseFlows, -DiffuseFlows)
data$Datetime <- as.POSIXct(data$Datetime, format="%m/%d/%Y %H:%M")
data_ete <- data %>%
filter(month(Datetime) == 7 | month(Datetime) == 8) %>%
filter(minute((Datetime)) == 0) %>%
filter(day(Datetime) <= 31)
colnames(data)
print("Unités : ° celsius / KW/h")
data <- read.csv("~/github/projet_electricite_temperature/data/powerconsumption.csv", header=T)
data$conso =
data$PowerConsumption_Zone1+
data$PowerConsumption_Zone2+
data$PowerConsumption_Zone3
data = data %>%
select(-PowerConsumption_Zone1, -PowerConsumption_Zone2, -PowerConsumption_Zone3, -Humidity, -WindSpeed, -GeneralDiffuseFlows, -DiffuseFlows)
data$Datetime <- as.POSIXct(data$Datetime, format="%m/%d/%Y %H:%M")
data_ete <- data %>%
filter(month(Datetime) == 7 | month(Datetime) == 8) %>%
filter(minute((Datetime)) == 0) %>%
filter(day(Datetime) <= 31)
colnames(data[1])
print("Unités : ° celsius / KW/h")
data <- read.csv("~/github/projet_electricite_temperature/data/powerconsumption.csv", header=T)
data$conso =
data$PowerConsumption_Zone1+
data$PowerConsumption_Zone2+
data$PowerConsumption_Zone3
data = data %>%
select(-PowerConsumption_Zone1, -PowerConsumption_Zone2, -PowerConsumption_Zone3, -Humidity, -WindSpeed, -GeneralDiffuseFlows, -DiffuseFlows)
data$Datetime <- as.POSIXct(data$Datetime, format="%m/%d/%Y %H:%M")
data_ete <- data %>%
filter(month(Datetime) == 7 | month(Datetime) == 8) %>%
filter(minute((Datetime)) == 0) %>%
filter(day(Datetime) <= 31)
colnames(data)
print("Unités : ° celsius / KW/h")
data <- read.csv("~/github/projet_electricite_temperature/data/powerconsumption.csv", header=T)
data$conso =
data$PowerConsumption_Zone1+
data$PowerConsumption_Zone2+
data$PowerConsumption_Zone3
data = data %>%
select(-PowerConsumption_Zone1, -PowerConsumption_Zone2, -PowerConsumption_Zone3, -Humidity, -WindSpeed, -GeneralDiffuseFlows, -DiffuseFlows)
data$Datetime <- as.POSIXct(data$Datetime, format="%m/%d/%Y %H:%M")
data_ete <- data %>%
filter(month(Datetime) == 7 | month(Datetime) == 8) %>%
filter(minute((Datetime)) == 0) %>%
filter(day(Datetime) <= 31)
colnames(data_ete)
print("Unités : ° celsius / KW/h")
data <- read.csv("~/github/projet_electricite_temperature/data/powerconsumption.csv", header=T)
data$conso =
data$PowerConsumption_Zone1+
data$PowerConsumption_Zone2+
data$PowerConsumption_Zone3
data = data %>%
select(-PowerConsumption_Zone1, -PowerConsumption_Zone2, -PowerConsumption_Zone3, -Humidity, -WindSpeed, -GeneralDiffuseFlows, -DiffuseFlows)
data$Datetime <- as.POSIXct(data$Datetime, format="%m/%d/%Y %H:%M")
data_ete <- data %>%
filter(month(Datetime) == 7 | month(Datetime) == 8) %>%
filter(minute((Datetime)) == 0) %>%
filter(day(Datetime) <= 31)
colnames(data_ete)
print("Unités : ° celsius / KW/h")
library(dplyr)
library(lubridate)
library(readr)
library(hms)
library(zoo)
library(forecast)
library(tseries)
data <- read.csv("~/github/projet_electricite_temperature/data/powerconsumption.csv", header=T)
data$conso =
data$PowerConsumption_Zone1+
data$PowerConsumption_Zone2+
data$PowerConsumption_Zone3
data = data %>%
select(-PowerConsumption_Zone1, -PowerConsumption_Zone2, -PowerConsumption_Zone3, -Humidity, -WindSpeed, -GeneralDiffuseFlows, -DiffuseFlows)
data$Datetime <- as.POSIXct(data$Datetime, format="%m/%d/%Y %H:%M")
data_ete <- data %>%
filter(month(Datetime) == 7 | month(Datetime) == 8) %>%
filter(minute((Datetime)) == 0) %>%
filter(day(Datetime) <= 31)
colnames(data_ete)
print("Unités : ° celsius / KW/h")
colnames(data_ete)
print("Unités : ° celsius / KW/h")
print(c("Variables", colnames(data_ete)))
print("Unités : ° celsius / KW/h")
print(c("Variables : ", colnames(data_ete)))
print("Unités : ° celsius / KW/h")
print(f("Variables : " colnames(data_ete)))
print(paste("Variables: ", paste(colnames(data_ete), collapse = ",")))
print("Unités : ° celsius / KW/h")
print(paste("Variables: ", paste(colnames(data_ete), collapse = " , ")))
print("Unités : ° celsius / KW/h")
print(paste("Variables: ", paste(colnames(data_ete), collapse = " , "), "Unités : ° celsius / KW/h"))
print("Unités : ° celsius / KW/h")
print("Variables : ''Datetime'' (date), ''Temperature'' (°c), ''Conso'' (KW/h)")
print("Variables : 'Datetime' (date), 'Temperature' (°c), 'Conso' (KW/h)")
print("Variables : 'Datetime' (date), 'Temperature' (°c), 'conso' (KW/h)")
library(dplyr)
library(lubridate)
library(readr)
library(hms)
library(zoo)
library(forecast)
library(tseries)
library(modelsummary)
data <- read.csv("~/github/projet_electricite_temperature/data/powerconsumption.csv", header=T)
data$conso =
data$PowerConsumption_Zone1+
data$PowerConsumption_Zone2+
data$PowerConsumption_Zone3
data = data %>%
select(-PowerConsumption_Zone1, -PowerConsumption_Zone2, -PowerConsumption_Zone3, -Humidity, -WindSpeed, -GeneralDiffuseFlows, -DiffuseFlows)
data$Datetime <- as.POSIXct(data$Datetime, format="%m/%d/%Y %H:%M")
data_ete <- data %>%
filter(month(Datetime) == 7 | month(Datetime) == 8) %>%
filter(minute((Datetime)) == 0) %>%
filter(day(Datetime) <= 31)
datasummary_skim(penguins)
datasummary_skim(data_ete)
datasummary_skim(data_ete)
datasummary_skim(data_ete)
datasummary_skim(data_ete)
library(dplyr)
library(lubridate)
library(readr)
library(hms)
library(zoo)
library(forecast)
library(tseries)
library(modelsummary)
library(float)
install.packages("float")
library(dplyr)
library(lubridate)
library(readr)
library(hms)
library(zoo)
library(forecast)
library(tseries)
library(modelsummary)
library(float)
data <- read.csv("~/github/projet_electricite_temperature/data/powerconsumption.csv", header=T)
data$conso =
data$PowerConsumption_Zone1+
data$PowerConsumption_Zone2+
data$PowerConsumption_Zone3
data = data %>%
select(-PowerConsumption_Zone1, -PowerConsumption_Zone2, -PowerConsumption_Zone3, -Humidity, -WindSpeed, -GeneralDiffuseFlows, -DiffuseFlows)
data$Datetime <- as.POSIXct(data$Datetime, format="%m/%d/%Y %H:%M")
data_ete <- data %>%
filter(month(Datetime) == 7 | month(Datetime) == 8) %>%
filter(minute((Datetime)) == 0) %>%
filter(day(Datetime) <= 31)
knitr::opts_chunk$set(fig.pos = "H", out.extra = "")
knitr::opts_chunk$set(fig.pos = "H")
datasummary_skim(data_ete)
knit_with_parameters("~/github/projet_electricite_temperature/projet.Rmd")
knitr::opts_chunk$set(echo = TRUE)
datasummary_skim(data_ete)
